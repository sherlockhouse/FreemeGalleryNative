package com.freeme.provider;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GALLERY_FILES".
 */
public class GalleryFilesDao extends AbstractDao<GalleryFiles, Long> {

    public static final String TABLENAME = "gallery_files";

    public GalleryFilesDao(DaoConfig config) {
        super(config);
    }


    public GalleryFilesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + TABLENAME + " (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"_data\" TEXT NOT NULL ," + // 1: data
                "\"_size\" INTEGER," + // 2: size
                "\"media_type\" INTEGER," + // 3: media_type
                "\"_display_name\" TEXT," + // 4: display_name
                "\"mime_type\" TEXT," + // 5: mime_type
                "\"title\" TEXT," + // 6: title
                "\"date_added\" INTEGER," + // 7: date_added
                "\"date_modified\" INTEGER," + // 8: date_modified
                "\"description\" TEXT," + // 9: description
                "\"picasa_id\" TEXT," + // 10: picasa_id
                "\"duration\" INTEGER," + // 11: duration
                "\"artist\" TEXT," + // 12: artist
                "\"album\" TEXT," + // 13: album
                "\"resolution\" TEXT," + // 14: resolution
                "\"width\" INTEGER," + // 15: width
                "\"height\" INTEGER," + // 16: height
                "\"latitude\" REAL," + // 17: latitude
                "\"longitude\" REAL," + // 18: longitude
                "\"datetaken\" INTEGER," + // 19: datetaken
                "\"orientation\" INTEGER," + // 20: orientation
                "\"mini_thumb_magic\" INTEGER," + // 21: mini_thumb_magic
                "\"bucket_id\" TEXT," + // 22: bucket_id
                "\"bucket_display_name\" TEXT," + // 23: bucket_display_name
                "\"story_bucket_id\" INTEGER," + // 24: story_bucket_id
                "\"is_hidden\" INTEGER," + // 25: is_hidden
                "\"lbs_loc\" TEXT);"); // 26: lbs_loc
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + TABLENAME;
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    public GalleryFiles readEntity(Cursor cursor, int offset) {
        GalleryFiles entity = new GalleryFiles( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // data
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // size
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // media_type
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // display_name
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mime_type
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // date_added
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // date_modified
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // description
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // picasa_id
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // duration
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // artist
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // album
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // resolution
                cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // width
                cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // height
                cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // latitude
                cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // longitude
                cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // datetaken
                cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // orientation
                cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // mini_thumb_magic
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // bucket_id
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // bucket_display_name
                cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // story_bucket_id
                cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // is_hidden
                cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // lbs_loc
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, GalleryFiles entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setData(cursor.getString(offset + 1));
        entity.setSize(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMedia_type(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDisplay_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMime_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate_added(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDate_modified(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDescription(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPicasa_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDuration(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setArtist(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAlbum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setResolution(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWidth(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setHeight(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setLatitude(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setLongitude(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setDatetaken(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setOrientation(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setMini_thumb_magic(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setBucket_id(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBucket_display_name(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setStory_bucket_id(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setIs_hidden(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setLbs_loc(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, GalleryFiles entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getData());

        Integer size = entity.getSize();
        if (size != null) {
            stmt.bindLong(3, size);
        }

        Integer media_type = entity.getMedia_type();
        if (media_type != null) {
            stmt.bindLong(4, media_type);
        }

        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(5, display_name);
        }

        String mime_type = entity.getMime_type();
        if (mime_type != null) {
            stmt.bindString(6, mime_type);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }

        Integer date_added = entity.getDate_added();
        if (date_added != null) {
            stmt.bindLong(8, date_added);
        }

        Integer date_modified = entity.getDate_modified();
        if (date_modified != null) {
            stmt.bindLong(9, date_modified);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(10, description);
        }

        String picasa_id = entity.getPicasa_id();
        if (picasa_id != null) {
            stmt.bindString(11, picasa_id);
        }

        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(12, duration);
        }

        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(13, artist);
        }

        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(14, album);
        }

        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(15, resolution);
        }

        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(16, width);
        }

        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(17, height);
        }

        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(18, latitude);
        }

        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(19, longitude);
        }

        Integer datetaken = entity.getDatetaken();
        if (datetaken != null) {
            stmt.bindLong(20, datetaken);
        }

        Integer orientation = entity.getOrientation();
        if (orientation != null) {
            stmt.bindLong(21, orientation);
        }

        Integer mini_thumb_magic = entity.getMini_thumb_magic();
        if (mini_thumb_magic != null) {
            stmt.bindLong(22, mini_thumb_magic);
        }

        String bucket_id = entity.getBucket_id();
        if (bucket_id != null) {
            stmt.bindString(23, bucket_id);
        }

        String bucket_display_name = entity.getBucket_display_name();
        if (bucket_display_name != null) {
            stmt.bindString(24, bucket_display_name);
        }

        Integer story_bucket_id = entity.getStory_bucket_id();
        if (story_bucket_id != null) {
            stmt.bindLong(25, story_bucket_id);
        }

        Integer is_hidden = entity.getIs_hidden();
        if (is_hidden != null) {
            stmt.bindLong(26, is_hidden);
        }

        String lbs_loc = entity.getLbs_loc();
        if (lbs_loc != null) {
            stmt.bindString(27, lbs_loc);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(GalleryFiles entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(GalleryFiles entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity GalleryFiles.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id                  = new Property(0, Long.class, "id", true, "_id");
        public final static Property Data                = new Property(1, String.class, "data", false, "_data");
        public final static Property Size                = new Property(2, Integer.class, "size", false, "_size");
        public final static Property Media_type          = new Property(3, Integer.class, "media_type", false, "media_type");
        public final static Property Display_name        = new Property(4, String.class, "display_name", false, "_display_name");
        public final static Property Mime_type           = new Property(5, String.class, "mime_type", false, "mime_type");
        public final static Property Title               = new Property(6, String.class, "title", false, "title");
        public final static Property Date_added          = new Property(7, Integer.class, "date_added", false, "date_added");
        public final static Property Date_modified       = new Property(8, Integer.class, "date_modified", false, "date_modified");
        public final static Property Description         = new Property(9, String.class, "description", false, "description");
        public final static Property Picasa_id           = new Property(10, String.class, "picasa_id", false, "picasa_id");
        public final static Property Duration            = new Property(11, Integer.class, "duration", false, "duration");
        public final static Property Artist              = new Property(12, String.class, "artist", false, "artist");
        public final static Property Album               = new Property(13, String.class, "album", false, "album");
        public final static Property Resolution          = new Property(14, String.class, "resolution", false, "resolution");
        public final static Property Width               = new Property(15, Integer.class, "width", false, "width");
        public final static Property Height              = new Property(16, Integer.class, "height", false, "height");
        public final static Property Latitude            = new Property(17, Double.class, "latitude", false, "latitude");
        public final static Property Longitude           = new Property(18, Double.class, "longitude", false, "longitude");
        public final static Property Datetaken           = new Property(19, Integer.class, "datetaken", false, "datetaken");
        public final static Property Orientation         = new Property(20, Integer.class, "orientation", false, "orientation");
        public final static Property Mini_thumb_magic    = new Property(21, Integer.class, "mini_thumb_magic", false, "mini_thumb_magic");
        public final static Property Bucket_id           = new Property(22, String.class, "bucket_id", false, "bucket_id");
        public final static Property Bucket_display_name = new Property(23, String.class, "bucket_display_name", false, "bucket_display_name");
        public final static Property Story_bucket_id     = new Property(24, Integer.class, "story_bucket_id", false, "story_bucket_id");
        public final static Property Is_hidden           = new Property(25, Integer.class, "is_hidden", false, "is_hidden");
        public final static Property Lbs_loc             = new Property(26, String.class, "lbs_loc", false, "lbs_loc");
    }

}
